// Package openapichi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapichi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"	
	"strings"
	
	"github.com/getkin/kin-openapi/openapi3"	
	"github.com/go-chi/chi"
)

// Community defines model for Community.
type Community struct {
	Users *[]User `json:"users,omitempty"`
}

// Corpgroup defines model for Corpgroup.
type Corpgroup struct {
	Users *[]User `json:"users,omitempty"`
}

// Organization defines model for Organization.
type Organization struct {
	Users *[]User `json:"users,omitempty"`
}

// Project defines model for Project.
type Project struct {
	Users *[]User `json:"users,omitempty"`
}

// User defines model for User.
type User map[string]interface{}

// AddEnvJSONBody defines parameters for AddEnv.
type AddEnvJSONBody interface{}

// AddUserJSONBody defines parameters for AddUser.
type AddUserJSONBody User

// SearchEnvParams defines parameters for SearchEnv.
type SearchEnvParams struct {
	User *[]User      `form:"user,omitempty" json:"user,omitempty"`
	Env  *interface{} `form:"env,omitempty" json:"env,omitempty"`
}

// SearchUserParams defines parameters for SearchUser.
type SearchUserParams struct {
	Searchparam *interface{} `form:"searchparam,omitempty" json:"searchparam,omitempty"`
}

// AddEnvJSONRequestBody defines body for AddEnv for application/json ContentType.
type AddEnvJSONRequestBody AddEnvJSONBody

// AddUserJSONRequestBody defines body for AddUser for application/json ContentType.
type AddUserJSONRequestBody AddUserJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new enviroment
	// (POST /addEnv)
	AddEnv(w http.ResponseWriter, r *http.Request)
	// Add a new user
	// (POST /addUser)
	AddUser(w http.ResponseWriter, r *http.Request)
	// search for env by user names or enviroment params
	// (GET /searchEnv)
	SearchEnv(w http.ResponseWriter, r *http.Request, params SearchEnvParams)
	// search user by name or enviroment
	// (GET /searchUser)
	SearchUser(w http.ResponseWriter, r *http.Request, params SearchUserParams)
	// set/delete user in enviroment
	// (POST /updateUserInEnv)
	UpdateUserInEnv(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AddEnv operation middleware
func (siw *ServerInterfaceWrapper) AddEnv(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddEnv(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SearchEnv operation middleware
func (siw *ServerInterfaceWrapper) SearchEnv(w http.ResponseWriter, r *http.Request) {
	//ctx := r.Context()

	// var err error

	// // Parameter object where we will unmarshal all parameters from the context
	// var params SearchEnvParams

	// // ------------- Optional query parameter "user" -------------
	// if paramValue := r.URL.Query().Get("user"); paramValue != "" {

	// }

	// err = runtime.BindQueryParameter("form", true, false, "user", r.URL.Query(), &params.User)
	// if err != nil {
	// 	siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "user", Err: err})
	// 	return
	// }

	// // ------------- Optional query parameter "env" -------------
	// if paramValue := r.URL.Query().Get("env"); paramValue != "" {

	// }

	// err = runtime.BindQueryParameter("form", true, false, "env", r.URL.Query(), &params.Env)
	// if err != nil {
	// 	siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "env", Err: err})
	// 	return
	// }

	// var handler = func(w http.ResponseWriter, r *http.Request) {
	// 	siw.Handler.SearchEnv(w, r, params)
	// }

	// for _, middleware := range siw.HandlerMiddlewares {
	// 	handler = middleware(handler)
	// }

	// handler(w, r.WithContext(ctx))
}

// SearchUser operation middleware
func (siw *ServerInterfaceWrapper) SearchUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	//var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params SearchUserParams

	// ------------- Optional query parameter "searchparam" -------------
	if paramValue := r.URL.Query().Get("searchparam"); paramValue != "" {

	}

	// err = runtime.BindQueryParameter("form", true, false, "searchparam", r.URL.Query(), &params.Searchparam)
	// if err != nil {
	// 	siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "searchparam", Err: err})
	// 	return
	// }

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchUser(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// SetUserInEnv operation middleware
func (siw *ServerInterfaceWrapper) SetUserInEnv(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserInEnv(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/addEnv", wrapper.AddEnv)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/addUser", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/searchEnv", wrapper.SearchEnv)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/searchUser", wrapper.SearchUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/updateUserInEnv", wrapper.SetUserInEnv)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+SWz27bOBDGX4WY3aPWcrK7F93aoIecUiDtKciBlsY2A/FPhkMXruF3Lzi046hwHTct",
	"3Bq9UeInkvPNb0ZcQett8A4dR2hWENs5Wi3DK29tcoaX+SGQD0hsUKZSRJKBYbQy+JtwCg38Ve+Wqzdr",
	"1R8jEqwr4GVAaEAT6SWsdy/85AFbzoorT2FGPoXTbXlDM+3MZ83Gu9Pt+p68DE+2oSib1dcTWWvc1MuU",
	"4T7PXbHu/Syh+oCRoYIFUhRz4GI0zmv5gE4HAw38OxqPLqGCoHkuh611171zC4nLR4kvRyfuXnfQwJsy",
	"XwHhY8LIb30nfLXeMTr5QIfQm1Y+qR9iyUoJWJZzeDOF5u6wMVt/19Vh3SD7L4l3dL6s3JbO+l487jC2",
	"ZEKBDHJUapIjLz4Ywg4apoTr/CIG72LB4XI8/uPcialtMcZp6tUTOxm7/4oXQ7HzrLRTmal1Bf/vkxjH",
	"SE73KiItkBQSeZIqiclaTcuCpdLK4SeFbmHI2+x2lmSgt7XzTaJF8HqkX67wUyL0mtN8f8rUtnX9hJSl",
	"cqoK6oia2vmmAc1wT7ZunxS5a5G2yNJw71Zg8s6PCSl76rTNvTCVzO7c+aG2vH8PlMOcdQ3f72fu19d1",
	"AUJNPeXCVpOlwKKy81GVl5tqV0JDfM7Rtu4PgLSp/CNIKkuK8KyzXR2D/hkgIRxMloLCkISCQAqdZszh",
	"XLuDN5pb5J3q0E/App5N0MT11JP9p9Osh513eBPEsun5dYNqZ9CzG2dkMm6WM5c2ZXXEj6bad18dpvzJ",
	"1Vzk9ti/4e+AIdcd9shYUDRuiGAWy9elpSTqoYE5c4hNXetgRmV2xBi5Xlxk478EAAD//wJcI53MDQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	//var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	// loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
	// 	var pathToFile = url.String()
	// 	pathToFile = path.Clean(pathToFile)
	// 	getSpec, ok := resolvePath[pathToFile]
	// 	if !ok {
	// 		err1 := fmt.Errorf("path not found: %s", pathToFile)
	// 		return nil, err1
	// 	}
	// 	return getSpec()
	// }
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
